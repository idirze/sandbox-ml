

sources:
  - name: spark-history-server
    kind: OCIRepository
    template: ociRepository
    config:
      url: oci://quay.io/sergealexandre/spark-history-server/chart/spark-history-server
      version: 1.0.0


components:

  - name: spark-history-server
    createNamespace: true
    vars:
      eventLogDir:  # TBD typically s3a://<bucket>/eventLogs
      s3:
        url: # TBD
        accessKey: # TBD
        secretKey: # TBD
      oidc:
        cipherSecretKey: FC5E81345CED0E256DC42E410362FF6E
      adminGroups:     # Comma separated list
    modules:
      - name: main
        source: spark-history-server
        chart:
          name: spark-history-server
          version: 1.0.0
        values: |
          ingress:
            enabled: true
            ingressClassName: "nginx"
            annotations:
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              cert-manager.io/cluster-issuer: {{ .Context.certificateIssuer.public }}
            hosts:
              - host: shs.{{ .Context.ingress.url }}
                paths:
                  - path: /
                    pathType: Prefix
            tls:
              - hosts:
                  - shs.{{ .Context.ingress.url }}
                secretName: shs-teama-tls
          config:
            spark.hadoop.fs.s3a.endpoint: {{ .Vars.s3.url }}
            spark.hadoop.fs.s3a.connection.ssl.enabled: true
            spark.history.fs.logDirectory: {{ .Vars.eventLogDir }}
            spark.hadoop.fs.s3a.impl: org.apache.hadoop.fs.s3a.S3AFileSystem
            spark.hadoop.fs.s3a.path.style.access: true
            spark.ui.filters: io.okdp.spark.authc.OidcAuthFilter
            spark.user.groups.mapping: io.okdp.spark.authz.OidcGroupMappingServiceProvider
            spark.history.ui.acls.enable: true
            spark.io.okdp.spark.authc.OidcAuthFilter.param.issuer-uri: https://dex.{{ .Context.ingress.url }}
            spark.io.okdp.spark.authc.OidcAuthFilter.param.redirect-uri: https://shs.{{ .Context.ingress.url }}/home
            spark.io.okdp.spark.authc.OidcAuthFilter.param.scope: openid+profile+email+offline_access+groups
            spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-max-age-minutes: 480
            spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-cipher-secret-key: {{ .Vars.oidc.cipherSecretKey }}
            spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-is-secure: true
            spark.io.okdp.spark.authc.OidcAuthFilter.param.user-id: email # Or sub
            # Members of this group will have access to all jobs.
            spark.history.ui.admin.acls.groups: {{ .Vars.adminGroups }}
          extraEnvs:
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Vars.s3.accessKey }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Vars.s3.secretKey }}
            # Disable Certificate Checking
            - name: SPARK_HISTORY_OPTS
              value: "-Dcom.amazonaws.sdk.disableCertChecking=true"
            - name: JAVA_TOOL_OPTIONS
              value: "-Djavax.net.ssl.trustStore=/cacerts/bundle.p12 -Djavax.net.ssl.trustStorePassword="
            - name: AUTH_CLIENT_ID
              value: "shs"
            - name: AUTH_CLIENT_SECRET
              value: "AsjhDFJcnsdlkjrEdEF"
          extraVolumes:
            - name: cacerts
              configMap:
                name: root-certs.pem
          extraVolumeMounts:
            - name: cacerts
              mountPath: /cacerts
